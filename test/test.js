// Generated by CoffeeScript 1.7.1
(function() {
  describe('Lisp', function() {
    describe('parser', function() {
      var p;
      p = null;
      beforeEach(function(done) {
        p = new Parser;
        return done();
      });
      it('should not thrown', function() {
        expect(function() {
          return p.parse('(1 "hoge" nil t \'(1 2 3))');
        }).not.to["throw"]();
        expect(function() {
          return p.parse('(cons 0 \'(1 2 3))');
        }).not.to["throw"]();
        expect(function() {
          return p.parse('(cond ((eq 1 1) "hoge") ((eq 2 2) "piyo"))');
        }).not.to["throw"]();
        expect(function() {
          return p.parse('(quote (1 2 3))');
        }).not.to["throw"]();
        return expect(function() {
          return p.parse('(lambda (x y) (+ x y))');
        }).not.to["throw"]();
      });
      return it('should thrown', function() {
        return expect(function() {
          return p.parse('(').to["throw"]();
        });
      });
    });
    return describe('evaluator', function() {
      it('should return sum of arguments', function() {
        return expect(Lisp["eval"]('(+ 1 2 3)').body).to.equal('6');
      });
      it('should return first of list', function() {
        return expect(Lisp["eval"]('(car \'(1 2 3))').body).to.equal('1');
      });
      it('should return rest of list', function() {
        return expect(Lisp["eval"]('(cdr \'(1 2 3))').body).to.equal('(2 3)');
      });
      it('should return joined list', function() {
        return expect(Lisp["eval"]('(cons 0 \'(1 2 3))').body).to.equal('(0 1 2 3)');
      });
      it('should return t', function() {
        return expect(Lisp["eval"]('(eq 1 1)').body).to.equal('t');
      });
      it('should return nil', function() {
        return expect(Lisp["eval"]('(eq 1 2)').body).to.equal('nil');
      });
      it('should return t', function() {
        return expect(Lisp["eval"]('(atom 1)').body).to.equal('t');
      });
      it('should return first value', function() {
        return expect(Lisp["eval"]("(cond ((eq 1 1) \"OK\") ((eq 1 2) \"NG\"))").body).to.equal('OK');
      });
      it('should return second value', function() {
        return expect(Lisp["eval"]("(cond ((eq 1 2) \"NG\") ((eq 1 1) \"OK\"))").body).to.equal('OK');
      });
      it('should return nil', function() {
        return expect(Lisp["eval"]("(cond ((eq 1 2) \"NG\") ((eq 3 4) \"NG\"))").body).to.equal('nil');
      });
      it('should return list', function() {
        return expect(Lisp["eval"]('(quote (1 2 3))').body).to.equal('(1 2 3)');
      });
      return it('should can define and call function', function() {
        return expect(Lisp["eval"]("(defun sum (x y) (+ x y))\n(sum 1 2)").body).to.equal('3');
      });
    });
  });

}).call(this);
