// Generated by CoffeeScript 1.7.1
var Atom, Item, List, Parser;

Atom = (function() {
  function Atom(value) {
    this.value = value;
  }

  return Atom;

})();

Item = (function() {
  function Item(value) {
    this.value = value;
  }

  return Item;

})();

List = (function() {
  function List(values) {
    this.values = values;
  }

  return List;

})();

Parser = (function() {
  function Parser() {}

  Parser.prototype.getChar = function() {
    return this.code[this.pos];
  };

  Parser.prototype.skip = function() {
    var _ref, _results;
    _results = [];
    while ((_ref = this.getChar()) != null ? _ref.match(/[ ]/) : void 0) {
      _results.push(this.pos++);
    }
    return _results;
  };

  Parser.prototype.isEOF = function() {
    return this.pos === this.code.length;
  };

  Parser.prototype.expects = function(pattern, throwing) {
    var valid;
    if (throwing == null) {
      throwing = true;
    }
    valid = (pattern instanceof RegExp && pattern.test(this.getChar())) || pattern === this.getChar();
    if (!valid && throwing) {
      throw "unexpected " + (this.getChar()) + ", expects " + pattern;
    }
    return valid;
  };

  Parser.prototype.forwards = function(pattern) {
    this.expects(pattern);
    return this.pos++;
  };

  Parser.prototype.atom = function() {
    var num;
    num = '';
    while (this.expects(/[0-9]/, false)) {
      num += this.getChar();
      this.pos++;
    }
    return new Atom(num);
  };

  Parser.prototype.item = function() {
    return new Item(this.atom());
  };

  Parser.prototype.list = function() {
    var ret;
    this.forwards('(');
    ret = [];
    while (!this.expects(')', false)) {
      ret.push(this.item());
      this.skip();
    }
    this.forwards(')');
    return new List(ret);
  };

  Parser.prototype.program = function() {
    var ret;
    ret = [];
    while (!this.isEOF()) {
      ret.push(this.list());
    }
    return ret;
  };

  Parser.prototype.parse = function(code) {
    this.code = code;
    this.pos = 0;
    return this.program();
  };

  return Parser;

})();

this.Lisp = (function() {
  function Lisp() {}

  Lisp["eval"] = function(code) {
    var p;
    p = new Parser;
    return p.parse(code);
  };

  return Lisp;

})();
